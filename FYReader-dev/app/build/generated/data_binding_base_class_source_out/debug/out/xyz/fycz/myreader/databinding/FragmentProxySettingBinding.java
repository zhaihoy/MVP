// Generated by view binder compiler. Do not edit!
package xyz.fycz.myreader.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import xyz.fycz.myreader.R;

public final class FragmentProxySettingBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout llContent;

  @NonNull
  public final LinearLayout llNoProxySources;

  @NonNull
  public final LinearLayout llProxyHost;

  @NonNull
  public final LinearLayout llProxyPassword;

  @NonNull
  public final LinearLayout llProxyPort;

  @NonNull
  public final LinearLayout llProxyType;

  @NonNull
  public final LinearLayout llProxyUsername;

  @NonNull
  public final RelativeLayout rlEnableProxy;

  @NonNull
  public final SwitchCompat scEnableProxy;

  @NonNull
  public final TextView tvProxyHost;

  @NonNull
  public final TextView tvProxyPassword;

  @NonNull
  public final TextView tvProxyPort;

  @NonNull
  public final TextView tvProxyType;

  @NonNull
  public final TextView tvProxyUsername;

  private FragmentProxySettingBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout llContent, @NonNull LinearLayout llNoProxySources,
      @NonNull LinearLayout llProxyHost, @NonNull LinearLayout llProxyPassword,
      @NonNull LinearLayout llProxyPort, @NonNull LinearLayout llProxyType,
      @NonNull LinearLayout llProxyUsername, @NonNull RelativeLayout rlEnableProxy,
      @NonNull SwitchCompat scEnableProxy, @NonNull TextView tvProxyHost,
      @NonNull TextView tvProxyPassword, @NonNull TextView tvProxyPort,
      @NonNull TextView tvProxyType, @NonNull TextView tvProxyUsername) {
    this.rootView = rootView;
    this.llContent = llContent;
    this.llNoProxySources = llNoProxySources;
    this.llProxyHost = llProxyHost;
    this.llProxyPassword = llProxyPassword;
    this.llProxyPort = llProxyPort;
    this.llProxyType = llProxyType;
    this.llProxyUsername = llProxyUsername;
    this.rlEnableProxy = rlEnableProxy;
    this.scEnableProxy = scEnableProxy;
    this.tvProxyHost = tvProxyHost;
    this.tvProxyPassword = tvProxyPassword;
    this.tvProxyPort = tvProxyPort;
    this.tvProxyType = tvProxyType;
    this.tvProxyUsername = tvProxyUsername;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProxySettingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProxySettingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_proxy_setting, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProxySettingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ll_content;
      LinearLayout llContent = rootView.findViewById(id);
      if (llContent == null) {
        break missingId;
      }

      id = R.id.ll_no_proxy_sources;
      LinearLayout llNoProxySources = rootView.findViewById(id);
      if (llNoProxySources == null) {
        break missingId;
      }

      id = R.id.ll_proxy_host;
      LinearLayout llProxyHost = rootView.findViewById(id);
      if (llProxyHost == null) {
        break missingId;
      }

      id = R.id.ll_proxy_password;
      LinearLayout llProxyPassword = rootView.findViewById(id);
      if (llProxyPassword == null) {
        break missingId;
      }

      id = R.id.ll_proxy_port;
      LinearLayout llProxyPort = rootView.findViewById(id);
      if (llProxyPort == null) {
        break missingId;
      }

      id = R.id.ll_proxy_type;
      LinearLayout llProxyType = rootView.findViewById(id);
      if (llProxyType == null) {
        break missingId;
      }

      id = R.id.ll_proxy_username;
      LinearLayout llProxyUsername = rootView.findViewById(id);
      if (llProxyUsername == null) {
        break missingId;
      }

      id = R.id.rl_enable_proxy;
      RelativeLayout rlEnableProxy = rootView.findViewById(id);
      if (rlEnableProxy == null) {
        break missingId;
      }

      id = R.id.sc_enable_proxy;
      SwitchCompat scEnableProxy = rootView.findViewById(id);
      if (scEnableProxy == null) {
        break missingId;
      }

      id = R.id.tv_proxy_host;
      TextView tvProxyHost = rootView.findViewById(id);
      if (tvProxyHost == null) {
        break missingId;
      }

      id = R.id.tv_proxy_password;
      TextView tvProxyPassword = rootView.findViewById(id);
      if (tvProxyPassword == null) {
        break missingId;
      }

      id = R.id.tv_proxy_port;
      TextView tvProxyPort = rootView.findViewById(id);
      if (tvProxyPort == null) {
        break missingId;
      }

      id = R.id.tv_proxy_type;
      TextView tvProxyType = rootView.findViewById(id);
      if (tvProxyType == null) {
        break missingId;
      }

      id = R.id.tv_proxy_username;
      TextView tvProxyUsername = rootView.findViewById(id);
      if (tvProxyUsername == null) {
        break missingId;
      }

      return new FragmentProxySettingBinding((LinearLayout) rootView, llContent, llNoProxySources,
          llProxyHost, llProxyPassword, llProxyPort, llProxyType, llProxyUsername, rlEnableProxy,
          scEnableProxy, tvProxyHost, tvProxyPassword, tvProxyPort, tvProxyType, tvProxyUsername);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
