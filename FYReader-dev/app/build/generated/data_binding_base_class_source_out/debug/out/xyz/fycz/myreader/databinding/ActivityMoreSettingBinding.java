// Generated by view binder compiler. Do not edit!
package xyz.fycz.myreader.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import xyz.fycz.myreader.R;

public final class ActivityMoreSettingBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView ivMatchChapterTip;

  @NonNull
  public final LinearLayout llBackupPath;

  @NonNull
  public final LinearLayout llBookSort;

  @NonNull
  public final LinearLayout llCloseRefresh;

  @NonNull
  public final LinearLayout llContent;

  @NonNull
  public final LinearLayout llDownloadAll;

  @NonNull
  public final LinearLayout llMineShow;

  @NonNull
  public final LinearLayout llProxy;

  @NonNull
  public final LinearLayout llThreadNum;

  @NonNull
  public final LinearLayout llWebdav;

  @NonNull
  public final RelativeLayout rlAdaptEnType;

  @NonNull
  public final RelativeLayout rlAlwaysNext;

  @NonNull
  public final RelativeLayout rlAutoRefresh;

  @NonNull
  public final RelativeLayout rlCatheGap;

  @NonNull
  public final RelativeLayout rlContentReplace;

  @NonNull
  public final RelativeLayout rlDeleteCathe;

  @NonNull
  public final RelativeLayout rlLongPress;

  @NonNull
  public final RelativeLayout rlMatchChapter;

  @NonNull
  public final RelativeLayout rlMatchChapterSuitability;

  @NonNull
  public final RelativeLayout rlNoMenuTitle;

  @NonNull
  public final RelativeLayout rlPrivateBookcase;

  @NonNull
  public final RelativeLayout rlReadAloudVolumeTurnPage;

  @NonNull
  public final RelativeLayout rlResetScreen;

  @NonNull
  public final RelativeLayout rlShowStatus;

  @NonNull
  public final RelativeLayout rlVolume;

  @NonNull
  public final SwitchCompat scAdaptEnType;

  @NonNull
  public final SwitchCompat scAlwaysNext;

  @NonNull
  public final SwitchCompat scAutoRefresh;

  @NonNull
  public final AppCompatSpinner scCatheGap;

  @NonNull
  public final SwitchCompat scLongPress;

  @NonNull
  public final SwitchCompat scMatchChapter;

  @NonNull
  public final AppCompatSpinner scMatchChapterSuitability;

  @NonNull
  public final SwitchCompat scNoMenuTitle;

  @NonNull
  public final SwitchCompat scReadAloudVolumeTurnPage;

  @NonNull
  public final AppCompatSpinner scResetScreen;

  @NonNull
  public final SwitchCompat scShowStatus;

  @NonNull
  public final SwitchCompat scVolume;

  @NonNull
  public final ScrollView svContent;

  @NonNull
  public final TextView tvBackupPath;

  @NonNull
  public final TextView tvBookSort;

  @NonNull
  public final TextView tvMineShow;

  @NonNull
  public final TextView tvThreadNum;

  private ActivityMoreSettingBinding(@NonNull LinearLayout rootView,
      @NonNull ImageView ivMatchChapterTip, @NonNull LinearLayout llBackupPath,
      @NonNull LinearLayout llBookSort, @NonNull LinearLayout llCloseRefresh,
      @NonNull LinearLayout llContent, @NonNull LinearLayout llDownloadAll,
      @NonNull LinearLayout llMineShow, @NonNull LinearLayout llProxy,
      @NonNull LinearLayout llThreadNum, @NonNull LinearLayout llWebdav,
      @NonNull RelativeLayout rlAdaptEnType, @NonNull RelativeLayout rlAlwaysNext,
      @NonNull RelativeLayout rlAutoRefresh, @NonNull RelativeLayout rlCatheGap,
      @NonNull RelativeLayout rlContentReplace, @NonNull RelativeLayout rlDeleteCathe,
      @NonNull RelativeLayout rlLongPress, @NonNull RelativeLayout rlMatchChapter,
      @NonNull RelativeLayout rlMatchChapterSuitability, @NonNull RelativeLayout rlNoMenuTitle,
      @NonNull RelativeLayout rlPrivateBookcase, @NonNull RelativeLayout rlReadAloudVolumeTurnPage,
      @NonNull RelativeLayout rlResetScreen, @NonNull RelativeLayout rlShowStatus,
      @NonNull RelativeLayout rlVolume, @NonNull SwitchCompat scAdaptEnType,
      @NonNull SwitchCompat scAlwaysNext, @NonNull SwitchCompat scAutoRefresh,
      @NonNull AppCompatSpinner scCatheGap, @NonNull SwitchCompat scLongPress,
      @NonNull SwitchCompat scMatchChapter, @NonNull AppCompatSpinner scMatchChapterSuitability,
      @NonNull SwitchCompat scNoMenuTitle, @NonNull SwitchCompat scReadAloudVolumeTurnPage,
      @NonNull AppCompatSpinner scResetScreen, @NonNull SwitchCompat scShowStatus,
      @NonNull SwitchCompat scVolume, @NonNull ScrollView svContent, @NonNull TextView tvBackupPath,
      @NonNull TextView tvBookSort, @NonNull TextView tvMineShow, @NonNull TextView tvThreadNum) {
    this.rootView = rootView;
    this.ivMatchChapterTip = ivMatchChapterTip;
    this.llBackupPath = llBackupPath;
    this.llBookSort = llBookSort;
    this.llCloseRefresh = llCloseRefresh;
    this.llContent = llContent;
    this.llDownloadAll = llDownloadAll;
    this.llMineShow = llMineShow;
    this.llProxy = llProxy;
    this.llThreadNum = llThreadNum;
    this.llWebdav = llWebdav;
    this.rlAdaptEnType = rlAdaptEnType;
    this.rlAlwaysNext = rlAlwaysNext;
    this.rlAutoRefresh = rlAutoRefresh;
    this.rlCatheGap = rlCatheGap;
    this.rlContentReplace = rlContentReplace;
    this.rlDeleteCathe = rlDeleteCathe;
    this.rlLongPress = rlLongPress;
    this.rlMatchChapter = rlMatchChapter;
    this.rlMatchChapterSuitability = rlMatchChapterSuitability;
    this.rlNoMenuTitle = rlNoMenuTitle;
    this.rlPrivateBookcase = rlPrivateBookcase;
    this.rlReadAloudVolumeTurnPage = rlReadAloudVolumeTurnPage;
    this.rlResetScreen = rlResetScreen;
    this.rlShowStatus = rlShowStatus;
    this.rlVolume = rlVolume;
    this.scAdaptEnType = scAdaptEnType;
    this.scAlwaysNext = scAlwaysNext;
    this.scAutoRefresh = scAutoRefresh;
    this.scCatheGap = scCatheGap;
    this.scLongPress = scLongPress;
    this.scMatchChapter = scMatchChapter;
    this.scMatchChapterSuitability = scMatchChapterSuitability;
    this.scNoMenuTitle = scNoMenuTitle;
    this.scReadAloudVolumeTurnPage = scReadAloudVolumeTurnPage;
    this.scResetScreen = scResetScreen;
    this.scShowStatus = scShowStatus;
    this.scVolume = scVolume;
    this.svContent = svContent;
    this.tvBackupPath = tvBackupPath;
    this.tvBookSort = tvBookSort;
    this.tvMineShow = tvMineShow;
    this.tvThreadNum = tvThreadNum;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMoreSettingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMoreSettingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_more_setting, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMoreSettingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.iv_match_chapter_tip;
      ImageView ivMatchChapterTip = rootView.findViewById(id);
      if (ivMatchChapterTip == null) {
        break missingId;
      }

      id = R.id.ll_backup_path;
      LinearLayout llBackupPath = rootView.findViewById(id);
      if (llBackupPath == null) {
        break missingId;
      }

      id = R.id.ll_book_sort;
      LinearLayout llBookSort = rootView.findViewById(id);
      if (llBookSort == null) {
        break missingId;
      }

      id = R.id.ll_close_refresh;
      LinearLayout llCloseRefresh = rootView.findViewById(id);
      if (llCloseRefresh == null) {
        break missingId;
      }

      id = R.id.ll_content;
      LinearLayout llContent = rootView.findViewById(id);
      if (llContent == null) {
        break missingId;
      }

      id = R.id.ll_download_all;
      LinearLayout llDownloadAll = rootView.findViewById(id);
      if (llDownloadAll == null) {
        break missingId;
      }

      id = R.id.ll_mine_show;
      LinearLayout llMineShow = rootView.findViewById(id);
      if (llMineShow == null) {
        break missingId;
      }

      id = R.id.ll_proxy;
      LinearLayout llProxy = rootView.findViewById(id);
      if (llProxy == null) {
        break missingId;
      }

      id = R.id.ll_thread_num;
      LinearLayout llThreadNum = rootView.findViewById(id);
      if (llThreadNum == null) {
        break missingId;
      }

      id = R.id.ll_webdav;
      LinearLayout llWebdav = rootView.findViewById(id);
      if (llWebdav == null) {
        break missingId;
      }

      id = R.id.rl_adapt_en_type;
      RelativeLayout rlAdaptEnType = rootView.findViewById(id);
      if (rlAdaptEnType == null) {
        break missingId;
      }

      id = R.id.rl_always_next;
      RelativeLayout rlAlwaysNext = rootView.findViewById(id);
      if (rlAlwaysNext == null) {
        break missingId;
      }

      id = R.id.rl_auto_refresh;
      RelativeLayout rlAutoRefresh = rootView.findViewById(id);
      if (rlAutoRefresh == null) {
        break missingId;
      }

      id = R.id.rl_cathe_gap;
      RelativeLayout rlCatheGap = rootView.findViewById(id);
      if (rlCatheGap == null) {
        break missingId;
      }

      id = R.id.rl_content_replace;
      RelativeLayout rlContentReplace = rootView.findViewById(id);
      if (rlContentReplace == null) {
        break missingId;
      }

      id = R.id.rl_delete_cathe;
      RelativeLayout rlDeleteCathe = rootView.findViewById(id);
      if (rlDeleteCathe == null) {
        break missingId;
      }

      id = R.id.rl_long_press;
      RelativeLayout rlLongPress = rootView.findViewById(id);
      if (rlLongPress == null) {
        break missingId;
      }

      id = R.id.rl_match_chapter;
      RelativeLayout rlMatchChapter = rootView.findViewById(id);
      if (rlMatchChapter == null) {
        break missingId;
      }

      id = R.id.rl_match_chapter_suitability;
      RelativeLayout rlMatchChapterSuitability = rootView.findViewById(id);
      if (rlMatchChapterSuitability == null) {
        break missingId;
      }

      id = R.id.rl_no_menu_title;
      RelativeLayout rlNoMenuTitle = rootView.findViewById(id);
      if (rlNoMenuTitle == null) {
        break missingId;
      }

      id = R.id.rl_private_bookcase;
      RelativeLayout rlPrivateBookcase = rootView.findViewById(id);
      if (rlPrivateBookcase == null) {
        break missingId;
      }

      id = R.id.rl_read_aloud_volume_turn_page;
      RelativeLayout rlReadAloudVolumeTurnPage = rootView.findViewById(id);
      if (rlReadAloudVolumeTurnPage == null) {
        break missingId;
      }

      id = R.id.rl_reset_screen;
      RelativeLayout rlResetScreen = rootView.findViewById(id);
      if (rlResetScreen == null) {
        break missingId;
      }

      id = R.id.rl_show_status;
      RelativeLayout rlShowStatus = rootView.findViewById(id);
      if (rlShowStatus == null) {
        break missingId;
      }

      id = R.id.rl_volume;
      RelativeLayout rlVolume = rootView.findViewById(id);
      if (rlVolume == null) {
        break missingId;
      }

      id = R.id.sc_adapt_en_type;
      SwitchCompat scAdaptEnType = rootView.findViewById(id);
      if (scAdaptEnType == null) {
        break missingId;
      }

      id = R.id.sc_always_next;
      SwitchCompat scAlwaysNext = rootView.findViewById(id);
      if (scAlwaysNext == null) {
        break missingId;
      }

      id = R.id.sc_auto_refresh;
      SwitchCompat scAutoRefresh = rootView.findViewById(id);
      if (scAutoRefresh == null) {
        break missingId;
      }

      id = R.id.sc_cathe_gap;
      AppCompatSpinner scCatheGap = rootView.findViewById(id);
      if (scCatheGap == null) {
        break missingId;
      }

      id = R.id.sc_long_press;
      SwitchCompat scLongPress = rootView.findViewById(id);
      if (scLongPress == null) {
        break missingId;
      }

      id = R.id.sc_match_chapter;
      SwitchCompat scMatchChapter = rootView.findViewById(id);
      if (scMatchChapter == null) {
        break missingId;
      }

      id = R.id.sc_match_chapter_suitability;
      AppCompatSpinner scMatchChapterSuitability = rootView.findViewById(id);
      if (scMatchChapterSuitability == null) {
        break missingId;
      }

      id = R.id.sc_no_menu_title;
      SwitchCompat scNoMenuTitle = rootView.findViewById(id);
      if (scNoMenuTitle == null) {
        break missingId;
      }

      id = R.id.sc_read_aloud_volume_turn_page;
      SwitchCompat scReadAloudVolumeTurnPage = rootView.findViewById(id);
      if (scReadAloudVolumeTurnPage == null) {
        break missingId;
      }

      id = R.id.sc_reset_screen;
      AppCompatSpinner scResetScreen = rootView.findViewById(id);
      if (scResetScreen == null) {
        break missingId;
      }

      id = R.id.sc_show_status;
      SwitchCompat scShowStatus = rootView.findViewById(id);
      if (scShowStatus == null) {
        break missingId;
      }

      id = R.id.sc_volume;
      SwitchCompat scVolume = rootView.findViewById(id);
      if (scVolume == null) {
        break missingId;
      }

      id = R.id.sv_content;
      ScrollView svContent = rootView.findViewById(id);
      if (svContent == null) {
        break missingId;
      }

      id = R.id.tv_backup_path;
      TextView tvBackupPath = rootView.findViewById(id);
      if (tvBackupPath == null) {
        break missingId;
      }

      id = R.id.tv_book_sort;
      TextView tvBookSort = rootView.findViewById(id);
      if (tvBookSort == null) {
        break missingId;
      }

      id = R.id.tv_mine_show;
      TextView tvMineShow = rootView.findViewById(id);
      if (tvMineShow == null) {
        break missingId;
      }

      id = R.id.tv_thread_num;
      TextView tvThreadNum = rootView.findViewById(id);
      if (tvThreadNum == null) {
        break missingId;
      }

      return new ActivityMoreSettingBinding((LinearLayout) rootView, ivMatchChapterTip,
          llBackupPath, llBookSort, llCloseRefresh, llContent, llDownloadAll, llMineShow, llProxy,
          llThreadNum, llWebdav, rlAdaptEnType, rlAlwaysNext, rlAutoRefresh, rlCatheGap,
          rlContentReplace, rlDeleteCathe, rlLongPress, rlMatchChapter, rlMatchChapterSuitability,
          rlNoMenuTitle, rlPrivateBookcase, rlReadAloudVolumeTurnPage, rlResetScreen, rlShowStatus,
          rlVolume, scAdaptEnType, scAlwaysNext, scAutoRefresh, scCatheGap, scLongPress,
          scMatchChapter, scMatchChapterSuitability, scNoMenuTitle, scReadAloudVolumeTurnPage,
          scResetScreen, scShowStatus, scVolume, svContent, tvBackupPath, tvBookSort, tvMineShow,
          tvThreadNum);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
