package zhy.hongyuan.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zhy.hongyuan.greendao.convert.ContentRuleConvert;
import zhy.hongyuan.greendao.convert.FindRuleConvert;
import zhy.hongyuan.greendao.convert.InfoRuleConvert;
import zhy.hongyuan.greendao.convert.SearchRuleConvert;
import zhy.hongyuan.greendao.convert.TocRuleConvert;
import zhy.hongyuan.greendao.entity.rule.ContentRule;
import zhy.hongyuan.greendao.entity.rule.FindRule;
import zhy.hongyuan.greendao.entity.rule.InfoRule;
import zhy.hongyuan.greendao.entity.rule.SearchRule;
import zhy.hongyuan.greendao.entity.rule.TocRule;

import zhy.hongyuan.greendao.entity.rule.BookSource;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_SOURCE".
*/
public class BookSourceDao extends AbstractDao<BookSource, String> {

    public static final String TABLENAME = "BOOK_SOURCE";

    /**
     * Properties of entity BookSource.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SourceUrl = new Property(0, String.class, "sourceUrl", true, "SOURCE_URL");
        public final static Property SourceEName = new Property(1, String.class, "sourceEName", false, "SOURCE_ENAME");
        public final static Property SourceName = new Property(2, String.class, "sourceName", false, "SOURCE_NAME");
        public final static Property SourceGroup = new Property(3, String.class, "sourceGroup", false, "SOURCE_GROUP");
        public final static Property SourceCharset = new Property(4, String.class, "sourceCharset", false, "SOURCE_CHARSET");
        public final static Property SourceType = new Property(5, String.class, "sourceType", false, "SOURCE_TYPE");
        public final static Property SourceHeaders = new Property(6, String.class, "sourceHeaders", false, "SOURCE_HEADERS");
        public final static Property LoginUrl = new Property(7, String.class, "loginUrl", false, "LOGIN_URL");
        public final static Property LoginCheckJs = new Property(8, String.class, "loginCheckJs", false, "LOGIN_CHECK_JS");
        public final static Property SourceComment = new Property(9, String.class, "sourceComment", false, "SOURCE_COMMENT");
        public final static Property ConcurrentRate = new Property(10, String.class, "concurrentRate", false, "CONCURRENT_RATE");
        public final static Property LastUpdateTime = new Property(11, Long.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
        public final static Property OrderNum = new Property(12, int.class, "orderNum", false, "ORDER_NUM");
        public final static Property Weight = new Property(13, int.class, "weight", false, "WEIGHT");
        public final static Property Enable = new Property(14, boolean.class, "enable", false, "ENABLE");
        public final static Property NoProxy = new Property(15, boolean.class, "noProxy", false, "NO_PROXY");
        public final static Property SearchRule = new Property(16, String.class, "searchRule", false, "SEARCH_RULE");
        public final static Property InfoRule = new Property(17, String.class, "infoRule", false, "INFO_RULE");
        public final static Property TocRule = new Property(18, String.class, "tocRule", false, "TOC_RULE");
        public final static Property ContentRule = new Property(19, String.class, "contentRule", false, "CONTENT_RULE");
        public final static Property FindRule = new Property(20, String.class, "findRule", false, "FIND_RULE");
    }

    private final SearchRuleConvert searchRuleConverter = new SearchRuleConvert();
    private final InfoRuleConvert infoRuleConverter = new InfoRuleConvert();
    private final TocRuleConvert tocRuleConverter = new TocRuleConvert();
    private final ContentRuleConvert contentRuleConverter = new ContentRuleConvert();
    private final FindRuleConvert findRuleConverter = new FindRuleConvert();

    public BookSourceDao(DaoConfig config) {
        super(config);
    }
    
    public BookSourceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_SOURCE\" (" + //
                "\"SOURCE_URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: sourceUrl
                "\"SOURCE_ENAME\" TEXT," + // 1: sourceEName
                "\"SOURCE_NAME\" TEXT," + // 2: sourceName
                "\"SOURCE_GROUP\" TEXT," + // 3: sourceGroup
                "\"SOURCE_CHARSET\" TEXT," + // 4: sourceCharset
                "\"SOURCE_TYPE\" TEXT," + // 5: sourceType
                "\"SOURCE_HEADERS\" TEXT," + // 6: sourceHeaders
                "\"LOGIN_URL\" TEXT," + // 7: loginUrl
                "\"LOGIN_CHECK_JS\" TEXT," + // 8: loginCheckJs
                "\"SOURCE_COMMENT\" TEXT," + // 9: sourceComment
                "\"CONCURRENT_RATE\" TEXT," + // 10: concurrentRate
                "\"LAST_UPDATE_TIME\" INTEGER," + // 11: lastUpdateTime
                "\"ORDER_NUM\" INTEGER NOT NULL ," + // 12: orderNum
                "\"WEIGHT\" INTEGER NOT NULL ," + // 13: weight
                "\"ENABLE\" INTEGER NOT NULL ," + // 14: enable
                "\"NO_PROXY\" INTEGER NOT NULL ," + // 15: noProxy
                "\"SEARCH_RULE\" TEXT," + // 16: searchRule
                "\"INFO_RULE\" TEXT," + // 17: infoRule
                "\"TOC_RULE\" TEXT," + // 18: tocRule
                "\"CONTENT_RULE\" TEXT," + // 19: contentRule
                "\"FIND_RULE\" TEXT);"); // 20: findRule
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_SOURCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookSource entity) {
        stmt.clearBindings();
 
        String sourceUrl = entity.getSourceUrl();
        if (sourceUrl != null) {
            stmt.bindString(1, sourceUrl);
        }
 
        String sourceEName = entity.getSourceEName();
        if (sourceEName != null) {
            stmt.bindString(2, sourceEName);
        }
 
        String sourceName = entity.getSourceName();
        if (sourceName != null) {
            stmt.bindString(3, sourceName);
        }
 
        String sourceGroup = entity.getSourceGroup();
        if (sourceGroup != null) {
            stmt.bindString(4, sourceGroup);
        }
 
        String sourceCharset = entity.getSourceCharset();
        if (sourceCharset != null) {
            stmt.bindString(5, sourceCharset);
        }
 
        String sourceType = entity.getSourceType();
        if (sourceType != null) {
            stmt.bindString(6, sourceType);
        }
 
        String sourceHeaders = entity.getSourceHeaders();
        if (sourceHeaders != null) {
            stmt.bindString(7, sourceHeaders);
        }
 
        String loginUrl = entity.getLoginUrl();
        if (loginUrl != null) {
            stmt.bindString(8, loginUrl);
        }
 
        String loginCheckJs = entity.getLoginCheckJs();
        if (loginCheckJs != null) {
            stmt.bindString(9, loginCheckJs);
        }
 
        String sourceComment = entity.getSourceComment();
        if (sourceComment != null) {
            stmt.bindString(10, sourceComment);
        }
 
        String concurrentRate = entity.getConcurrentRate();
        if (concurrentRate != null) {
            stmt.bindString(11, concurrentRate);
        }
 
        Long lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindLong(12, lastUpdateTime);
        }
        stmt.bindLong(13, entity.getOrderNum());
        stmt.bindLong(14, entity.getWeight());
        stmt.bindLong(15, entity.getEnable() ? 1L: 0L);
        stmt.bindLong(16, entity.getNoProxy() ? 1L: 0L);
 
        SearchRule searchRule = entity.getSearchRule();
        if (searchRule != null) {
            stmt.bindString(17, searchRuleConverter.convertToDatabaseValue(searchRule));
        }
 
        InfoRule infoRule = entity.getInfoRule();
        if (infoRule != null) {
            stmt.bindString(18, infoRuleConverter.convertToDatabaseValue(infoRule));
        }
 
        TocRule tocRule = entity.getTocRule();
        if (tocRule != null) {
            stmt.bindString(19, tocRuleConverter.convertToDatabaseValue(tocRule));
        }
 
        ContentRule contentRule = entity.getContentRule();
        if (contentRule != null) {
            stmt.bindString(20, contentRuleConverter.convertToDatabaseValue(contentRule));
        }
 
        FindRule findRule = entity.getFindRule();
        if (findRule != null) {
            stmt.bindString(21, findRuleConverter.convertToDatabaseValue(findRule));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookSource entity) {
        stmt.clearBindings();
 
        String sourceUrl = entity.getSourceUrl();
        if (sourceUrl != null) {
            stmt.bindString(1, sourceUrl);
        }
 
        String sourceEName = entity.getSourceEName();
        if (sourceEName != null) {
            stmt.bindString(2, sourceEName);
        }
 
        String sourceName = entity.getSourceName();
        if (sourceName != null) {
            stmt.bindString(3, sourceName);
        }
 
        String sourceGroup = entity.getSourceGroup();
        if (sourceGroup != null) {
            stmt.bindString(4, sourceGroup);
        }
 
        String sourceCharset = entity.getSourceCharset();
        if (sourceCharset != null) {
            stmt.bindString(5, sourceCharset);
        }
 
        String sourceType = entity.getSourceType();
        if (sourceType != null) {
            stmt.bindString(6, sourceType);
        }
 
        String sourceHeaders = entity.getSourceHeaders();
        if (sourceHeaders != null) {
            stmt.bindString(7, sourceHeaders);
        }
 
        String loginUrl = entity.getLoginUrl();
        if (loginUrl != null) {
            stmt.bindString(8, loginUrl);
        }
 
        String loginCheckJs = entity.getLoginCheckJs();
        if (loginCheckJs != null) {
            stmt.bindString(9, loginCheckJs);
        }
 
        String sourceComment = entity.getSourceComment();
        if (sourceComment != null) {
            stmt.bindString(10, sourceComment);
        }
 
        String concurrentRate = entity.getConcurrentRate();
        if (concurrentRate != null) {
            stmt.bindString(11, concurrentRate);
        }
 
        Long lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindLong(12, lastUpdateTime);
        }
        stmt.bindLong(13, entity.getOrderNum());
        stmt.bindLong(14, entity.getWeight());
        stmt.bindLong(15, entity.getEnable() ? 1L: 0L);
        stmt.bindLong(16, entity.getNoProxy() ? 1L: 0L);
 
        SearchRule searchRule = entity.getSearchRule();
        if (searchRule != null) {
            stmt.bindString(17, searchRuleConverter.convertToDatabaseValue(searchRule));
        }
 
        InfoRule infoRule = entity.getInfoRule();
        if (infoRule != null) {
            stmt.bindString(18, infoRuleConverter.convertToDatabaseValue(infoRule));
        }
 
        TocRule tocRule = entity.getTocRule();
        if (tocRule != null) {
            stmt.bindString(19, tocRuleConverter.convertToDatabaseValue(tocRule));
        }
 
        ContentRule contentRule = entity.getContentRule();
        if (contentRule != null) {
            stmt.bindString(20, contentRuleConverter.convertToDatabaseValue(contentRule));
        }
 
        FindRule findRule = entity.getFindRule();
        if (findRule != null) {
            stmt.bindString(21, findRuleConverter.convertToDatabaseValue(findRule));
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookSource readEntity(Cursor cursor, int offset) {
        BookSource entity = new BookSource( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sourceUrl
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sourceEName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sourceName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sourceGroup
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sourceCharset
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sourceType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sourceHeaders
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // loginUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // loginCheckJs
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sourceComment
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // concurrentRate
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // lastUpdateTime
            cursor.getInt(offset + 12), // orderNum
            cursor.getInt(offset + 13), // weight
            cursor.getShort(offset + 14) != 0, // enable
            cursor.getShort(offset + 15) != 0, // noProxy
            cursor.isNull(offset + 16) ? null : searchRuleConverter.convertToEntityProperty(cursor.getString(offset + 16)), // searchRule
            cursor.isNull(offset + 17) ? null : infoRuleConverter.convertToEntityProperty(cursor.getString(offset + 17)), // infoRule
            cursor.isNull(offset + 18) ? null : tocRuleConverter.convertToEntityProperty(cursor.getString(offset + 18)), // tocRule
            cursor.isNull(offset + 19) ? null : contentRuleConverter.convertToEntityProperty(cursor.getString(offset + 19)), // contentRule
            cursor.isNull(offset + 20) ? null : findRuleConverter.convertToEntityProperty(cursor.getString(offset + 20)) // findRule
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookSource entity, int offset) {
        entity.setSourceUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSourceEName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSourceName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSourceGroup(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSourceCharset(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSourceType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSourceHeaders(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLoginUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLoginCheckJs(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSourceComment(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setConcurrentRate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLastUpdateTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setOrderNum(cursor.getInt(offset + 12));
        entity.setWeight(cursor.getInt(offset + 13));
        entity.setEnable(cursor.getShort(offset + 14) != 0);
        entity.setNoProxy(cursor.getShort(offset + 15) != 0);
        entity.setSearchRule(cursor.isNull(offset + 16) ? null : searchRuleConverter.convertToEntityProperty(cursor.getString(offset + 16)));
        entity.setInfoRule(cursor.isNull(offset + 17) ? null : infoRuleConverter.convertToEntityProperty(cursor.getString(offset + 17)));
        entity.setTocRule(cursor.isNull(offset + 18) ? null : tocRuleConverter.convertToEntityProperty(cursor.getString(offset + 18)));
        entity.setContentRule(cursor.isNull(offset + 19) ? null : contentRuleConverter.convertToEntityProperty(cursor.getString(offset + 19)));
        entity.setFindRule(cursor.isNull(offset + 20) ? null : findRuleConverter.convertToEntityProperty(cursor.getString(offset + 20)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookSource entity, long rowId) {
        return entity.getSourceUrl();
    }
    
    @Override
    public String getKey(BookSource entity) {
        if(entity != null) {
            return entity.getSourceUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookSource entity) {
        return entity.getSourceUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
