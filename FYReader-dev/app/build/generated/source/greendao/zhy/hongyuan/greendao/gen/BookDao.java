package zhy.hongyuan.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zhy.hongyuan.greendao.entity.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, String> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ChapterUrl = new Property(2, String.class, "chapterUrl", false, "CHAPTER_URL");
        public final static Property InfoUrl = new Property(3, String.class, "infoUrl", false, "INFO_URL");
        public final static Property ImgUrl = new Property(4, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Author = new Property(6, String.class, "author", false, "AUTHOR");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property UpdateDate = new Property(8, String.class, "updateDate", false, "UPDATE_DATE");
        public final static Property WordCount = new Property(9, String.class, "wordCount", false, "WORD_COUNT");
        public final static Property Status = new Property(10, String.class, "status", false, "STATUS");
        public final static Property NewestChapterId = new Property(11, String.class, "newestChapterId", false, "NEWEST_CHAPTER_ID");
        public final static Property NewestChapterTitle = new Property(12, String.class, "newestChapterTitle", false, "NEWEST_CHAPTER_TITLE");
        public final static Property HistoryChapterId = new Property(13, String.class, "historyChapterId", false, "HISTORY_CHAPTER_ID");
        public final static Property HisttoryChapterNum = new Property(14, int.class, "histtoryChapterNum", false, "HISTTORY_CHAPTER_NUM");
        public final static Property SortCode = new Property(15, int.class, "sortCode", false, "SORT_CODE");
        public final static Property NoReadNum = new Property(16, int.class, "noReadNum", false, "NO_READ_NUM");
        public final static Property ChapterTotalNum = new Property(17, int.class, "chapterTotalNum", false, "CHAPTER_TOTAL_NUM");
        public final static Property LastReadPosition = new Property(18, int.class, "lastReadPosition", false, "LAST_READ_POSITION");
        public final static Property Source = new Property(19, String.class, "source", false, "SOURCE");
        public final static Property IsCloseUpdate = new Property(20, boolean.class, "isCloseUpdate", false, "IS_CLOSE_UPDATE");
        public final static Property IsDownLoadAll = new Property(21, boolean.class, "isDownLoadAll", false, "IS_DOWN_LOAD_ALL");
        public final static Property GroupId = new Property(22, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupSort = new Property(23, int.class, "groupSort", false, "GROUP_SORT");
        public final static Property ReSeg = new Property(24, boolean.class, "reSeg", false, "RE_SEG");
        public final static Property Tag = new Property(25, String.class, "tag", false, "TAG");
        public final static Property ReplaceEnable = new Property(26, Boolean.class, "replaceEnable", false, "REPLACE_ENABLE");
        public final static Property LastReadTime = new Property(27, long.class, "lastReadTime", false, "LAST_READ_TIME");
        public final static Property Variable = new Property(28, String.class, "variable", false, "VARIABLE");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CHAPTER_URL\" TEXT," + // 2: chapterUrl
                "\"INFO_URL\" TEXT," + // 3: infoUrl
                "\"IMG_URL\" TEXT," + // 4: imgUrl
                "\"DESC\" TEXT," + // 5: desc
                "\"AUTHOR\" TEXT," + // 6: author
                "\"TYPE\" TEXT," + // 7: type
                "\"UPDATE_DATE\" TEXT," + // 8: updateDate
                "\"WORD_COUNT\" TEXT," + // 9: wordCount
                "\"STATUS\" TEXT," + // 10: status
                "\"NEWEST_CHAPTER_ID\" TEXT," + // 11: newestChapterId
                "\"NEWEST_CHAPTER_TITLE\" TEXT," + // 12: newestChapterTitle
                "\"HISTORY_CHAPTER_ID\" TEXT," + // 13: historyChapterId
                "\"HISTTORY_CHAPTER_NUM\" INTEGER NOT NULL ," + // 14: histtoryChapterNum
                "\"SORT_CODE\" INTEGER NOT NULL ," + // 15: sortCode
                "\"NO_READ_NUM\" INTEGER NOT NULL ," + // 16: noReadNum
                "\"CHAPTER_TOTAL_NUM\" INTEGER NOT NULL ," + // 17: chapterTotalNum
                "\"LAST_READ_POSITION\" INTEGER NOT NULL ," + // 18: lastReadPosition
                "\"SOURCE\" TEXT," + // 19: source
                "\"IS_CLOSE_UPDATE\" INTEGER NOT NULL ," + // 20: isCloseUpdate
                "\"IS_DOWN_LOAD_ALL\" INTEGER NOT NULL ," + // 21: isDownLoadAll
                "\"GROUP_ID\" TEXT," + // 22: groupId
                "\"GROUP_SORT\" INTEGER NOT NULL ," + // 23: groupSort
                "\"RE_SEG\" INTEGER NOT NULL ," + // 24: reSeg
                "\"TAG\" TEXT," + // 25: tag
                "\"REPLACE_ENABLE\" INTEGER," + // 26: replaceEnable
                "\"LAST_READ_TIME\" INTEGER NOT NULL ," + // 27: lastReadTime
                "\"VARIABLE\" TEXT);"); // 28: variable
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String chapterUrl = entity.getChapterUrl();
        if (chapterUrl != null) {
            stmt.bindString(3, chapterUrl);
        }
 
        String infoUrl = entity.getInfoUrl();
        if (infoUrl != null) {
            stmt.bindString(4, infoUrl);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(7, author);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(9, updateDate);
        }
 
        String wordCount = entity.getWordCount();
        if (wordCount != null) {
            stmt.bindString(10, wordCount);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        String newestChapterId = entity.getNewestChapterId();
        if (newestChapterId != null) {
            stmt.bindString(12, newestChapterId);
        }
 
        String newestChapterTitle = entity.getNewestChapterTitle();
        if (newestChapterTitle != null) {
            stmt.bindString(13, newestChapterTitle);
        }
 
        String historyChapterId = entity.getHistoryChapterId();
        if (historyChapterId != null) {
            stmt.bindString(14, historyChapterId);
        }
        stmt.bindLong(15, entity.getHisttoryChapterNum());
        stmt.bindLong(16, entity.getSortCode());
        stmt.bindLong(17, entity.getNoReadNum());
        stmt.bindLong(18, entity.getChapterTotalNum());
        stmt.bindLong(19, entity.getLastReadPosition());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(20, source);
        }
        stmt.bindLong(21, entity.getIsCloseUpdate() ? 1L: 0L);
        stmt.bindLong(22, entity.getIsDownLoadAll() ? 1L: 0L);
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(23, groupId);
        }
        stmt.bindLong(24, entity.getGroupSort());
        stmt.bindLong(25, entity.getReSeg() ? 1L: 0L);
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(26, tag);
        }
 
        Boolean replaceEnable = entity.getReplaceEnable();
        if (replaceEnable != null) {
            stmt.bindLong(27, replaceEnable ? 1L: 0L);
        }
        stmt.bindLong(28, entity.getLastReadTime());
 
        String variable = entity.getVariable();
        if (variable != null) {
            stmt.bindString(29, variable);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String chapterUrl = entity.getChapterUrl();
        if (chapterUrl != null) {
            stmt.bindString(3, chapterUrl);
        }
 
        String infoUrl = entity.getInfoUrl();
        if (infoUrl != null) {
            stmt.bindString(4, infoUrl);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(7, author);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindString(9, updateDate);
        }
 
        String wordCount = entity.getWordCount();
        if (wordCount != null) {
            stmt.bindString(10, wordCount);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        String newestChapterId = entity.getNewestChapterId();
        if (newestChapterId != null) {
            stmt.bindString(12, newestChapterId);
        }
 
        String newestChapterTitle = entity.getNewestChapterTitle();
        if (newestChapterTitle != null) {
            stmt.bindString(13, newestChapterTitle);
        }
 
        String historyChapterId = entity.getHistoryChapterId();
        if (historyChapterId != null) {
            stmt.bindString(14, historyChapterId);
        }
        stmt.bindLong(15, entity.getHisttoryChapterNum());
        stmt.bindLong(16, entity.getSortCode());
        stmt.bindLong(17, entity.getNoReadNum());
        stmt.bindLong(18, entity.getChapterTotalNum());
        stmt.bindLong(19, entity.getLastReadPosition());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(20, source);
        }
        stmt.bindLong(21, entity.getIsCloseUpdate() ? 1L: 0L);
        stmt.bindLong(22, entity.getIsDownLoadAll() ? 1L: 0L);
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(23, groupId);
        }
        stmt.bindLong(24, entity.getGroupSort());
        stmt.bindLong(25, entity.getReSeg() ? 1L: 0L);
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(26, tag);
        }
 
        Boolean replaceEnable = entity.getReplaceEnable();
        if (replaceEnable != null) {
            stmt.bindLong(27, replaceEnable ? 1L: 0L);
        }
        stmt.bindLong(28, entity.getLastReadTime());
 
        String variable = entity.getVariable();
        if (variable != null) {
            stmt.bindString(29, variable);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chapterUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // infoUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imgUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // author
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // updateDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // wordCount
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // status
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // newestChapterId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // newestChapterTitle
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // historyChapterId
            cursor.getInt(offset + 14), // histtoryChapterNum
            cursor.getInt(offset + 15), // sortCode
            cursor.getInt(offset + 16), // noReadNum
            cursor.getInt(offset + 17), // chapterTotalNum
            cursor.getInt(offset + 18), // lastReadPosition
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // source
            cursor.getShort(offset + 20) != 0, // isCloseUpdate
            cursor.getShort(offset + 21) != 0, // isDownLoadAll
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // groupId
            cursor.getInt(offset + 23), // groupSort
            cursor.getShort(offset + 24) != 0, // reSeg
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // tag
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // replaceEnable
            cursor.getLong(offset + 27), // lastReadTime
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28) // variable
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChapterUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInfoUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAuthor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWordCount(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNewestChapterId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNewestChapterTitle(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHistoryChapterId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHisttoryChapterNum(cursor.getInt(offset + 14));
        entity.setSortCode(cursor.getInt(offset + 15));
        entity.setNoReadNum(cursor.getInt(offset + 16));
        entity.setChapterTotalNum(cursor.getInt(offset + 17));
        entity.setLastReadPosition(cursor.getInt(offset + 18));
        entity.setSource(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsCloseUpdate(cursor.getShort(offset + 20) != 0);
        entity.setIsDownLoadAll(cursor.getShort(offset + 21) != 0);
        entity.setGroupId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setGroupSort(cursor.getInt(offset + 23));
        entity.setReSeg(cursor.getShort(offset + 24) != 0);
        entity.setTag(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setReplaceEnable(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setLastReadTime(cursor.getLong(offset + 27));
        entity.setVariable(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Book entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
