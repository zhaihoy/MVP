package zhy.hongyuan.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import zhy.hongyuan.greendao.entity.Chapter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER".
*/
public class ChapterDao extends AbstractDao<Chapter, String> {

    public static final String TABLENAME = "CHAPTER";

    /**
     * Properties of entity Chapter.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property BookId = new Property(1, String.class, "bookId", false, "BOOK_ID");
        public final static Property Number = new Property(2, int.class, "number", false, "NUMBER");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property IsVip = new Property(5, boolean.class, "isVip", false, "IS_VIP");
        public final static Property IsPay = new Property(6, boolean.class, "isPay", false, "IS_PAY");
        public final static Property UpdateTime = new Property(7, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
        public final static Property Start = new Property(9, long.class, "start", false, "START");
        public final static Property End = new Property(10, long.class, "end", false, "END");
        public final static Property Variable = new Property(11, String.class, "variable", false, "VARIABLE");
    }


    public ChapterDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"BOOK_ID\" TEXT," + // 1: bookId
                "\"NUMBER\" INTEGER NOT NULL ," + // 2: number
                "\"TITLE\" TEXT," + // 3: title
                "\"URL\" TEXT," + // 4: url
                "\"IS_VIP\" INTEGER NOT NULL ," + // 5: isVip
                "\"IS_PAY\" INTEGER NOT NULL ," + // 6: isPay
                "\"UPDATE_TIME\" TEXT," + // 7: updateTime
                "\"CONTENT\" TEXT," + // 8: content
                "\"START\" INTEGER NOT NULL ," + // 9: start
                "\"END\" INTEGER NOT NULL ," + // 10: end
                "\"VARIABLE\" TEXT);"); // 11: variable
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
        stmt.bindLong(3, entity.getNumber());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
        stmt.bindLong(6, entity.getIsVip() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsPay() ? 1L: 0L);
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(8, updateTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
        stmt.bindLong(10, entity.getStart());
        stmt.bindLong(11, entity.getEnd());
 
        String variable = entity.getVariable();
        if (variable != null) {
            stmt.bindString(12, variable);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chapter entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(2, bookId);
        }
        stmt.bindLong(3, entity.getNumber());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
        stmt.bindLong(6, entity.getIsVip() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsPay() ? 1L: 0L);
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(8, updateTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
        stmt.bindLong(10, entity.getStart());
        stmt.bindLong(11, entity.getEnd());
 
        String variable = entity.getVariable();
        if (variable != null) {
            stmt.bindString(12, variable);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Chapter readEntity(Cursor cursor, int offset) {
        Chapter entity = new Chapter( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookId
            cursor.getInt(offset + 2), // number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.getShort(offset + 5) != 0, // isVip
            cursor.getShort(offset + 6) != 0, // isPay
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updateTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.getLong(offset + 9), // start
            cursor.getLong(offset + 10), // end
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // variable
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chapter entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumber(cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsVip(cursor.getShort(offset + 5) != 0);
        entity.setIsPay(cursor.getShort(offset + 6) != 0);
        entity.setUpdateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStart(cursor.getLong(offset + 9));
        entity.setEnd(cursor.getLong(offset + 10));
        entity.setVariable(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Chapter entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Chapter entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chapter entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
